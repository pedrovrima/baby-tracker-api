{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","HttpLink","uri","wsLink","WebSocketLink","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","link","ApolloLink","from","SleepTimes","gql","SLEEP_CHANGED","createSleep","createTimeString","date","minutes","getMinutes","hours","getHours","Times","sub","useSubscription","useQuery","loading","error","data","useMutation","createSleepHook","slp_data","useState","type","sleepObj","setSleepObj","useEffect","sleepChanged","sleeps","length","onClick","variables","time","Date","now","console","log","ReactDOM","render","document","getElementById"],"mappings":"gPAAe,I,MCwBAA,ICZAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uTCed,IAAMQ,EAAW,IAAIC,WAAS,CAC5BC,IAAK,kCAGDC,EAAS,IAAIC,IAAc,CAC/BF,IAAK,gCAGDG,EAAYC,iBAChB,YAAgB,IAAbC,EAAY,EAAZA,MACKC,EAAaC,YAAkBF,GACrC,MACsB,wBAApBC,EAAWE,MACc,iBAAzBF,EAAWG,YAGfR,EACAH,GAGWY,EAAS,IAAIC,eAAa,CAErCC,MAAO,IAAIC,gBACXC,KAAMC,aAAWC,KAAK,CAACb,MAGnBc,EAAaC,cAAH,KASVC,EAAgBD,cAAH,KAsBbE,EAAcF,cAAI,wHAmBxB,SAASG,EAAiBC,GACxB,IAAMC,EAAUD,EAAKE,aAEfC,EAAQH,EAAKI,WACnB,MAAM,GAAN,OAAUD,EAAV,YAAmBF,EAAU,EAAI,GAAK,KAAtC,OAA4CA,GAI9C,SAASI,IACP,IAAMC,EAAMC,0BAAgBV,GADb,EAEkBW,mBAASb,GAAlCc,EAFO,EAEPA,QAASC,EAFF,EAEEA,MAAOC,EAFT,EAESA,KAFT,EAGyBC,sBAAYd,GAHrC,mBAGRe,EAHQ,aAGWC,SACMC,mBAAS,CAACC,KAAK,MAJhC,mBAIRC,EAJQ,KAIEC,EAJF,KAcf,OATAC,qBAAU,WACJV,IACDH,EAAIK,KACLO,EAAYZ,EAAIK,KAAKS,cAErBF,EAAYP,EAAKU,OAAOV,EAAKU,OAAOC,OAAS,OAE/C,CAACX,EAAKL,EAAIK,OAERF,EAAiB,2CACjBC,EAAc,yCAShB,qCACE,wBACEa,QAAS,WACTV,EAAgB,CAAEW,UAAW,CAAEC,KAAMC,KAAKC,MAAOX,KAAsB,UAAhBC,EAASD,KAAe,MAAM,YAFvF,SAIkB,UAAhBC,EAASD,KAAe,UAAU,WAEzCC,EAASD,KAEH,kCAAqB,UAAhBC,EAASD,KAAe,WAAW,WAAxC,aAA8DjB,EAAiB,IAAI2B,KAAKT,EAASQ,UAAY,GAThH,UA7CJG,QAAQC,IAAI,QAEZC,IAASC,OACP,cAAC,iBAAD,CAAgB3C,OAAQA,EAAxB,SACE,cAACiB,EAAD,MAEF2B,SAASC,eAAe,SAyD1BlE,M","file":"static/js/main.e1e728d3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useEffect, useState} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\n\nimport {\n  gql,\n  split,\n  ApolloProvider,\n  ApolloClient,\n  useQuery,\n  ApolloLink,\n  useSubscription,\n  HttpLink,\n  InMemoryCache,\n  useMutation,\n} from \"@apollo/client\";\n\n// 3\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:4000/graphql\",\n});\n\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost:4000/graphql\",\n});\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nexport const client = new ApolloClient({\n  \n  cache: new InMemoryCache(),\n  link: ApolloLink.from([splitLink]),\n});\n\nconst SleepTimes = gql`\n  query getSleep {\n    sleeps {\n      time\n      type\n    }\n  }\n`;\n\nconst SLEEP_CHANGED = gql`\n  subscription Sub {\n    sleepChanged{\n      time,type}\n\n  \n    }\n  \n`;\n\n// function NumberInv() {\n//   const {\n//     data,\n//     loading,\n//   } = useSubscription(SLEEP_CHANGED);\n//   console.log(data)\n//   if(!loading){\n//   return <h4>New comment: {data.sleepChanged.time} </h4>;}else{\n//     return \"\"\n//   }\n\n\nconst createSleep = gql(`\nmutation  createSleep($time:DateTime!, $type:String!){\n        createSleep(time:$time,  type:$type){\n   time\n}}`);\n\nconsole.log(\"here\");\n// 4\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Times />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\nfunction addZero(number) {\n  return `${number}`;\n}\n\nfunction createTimeString(date) {\n  const minutes = date.getMinutes();\n  // console.log(minutes);\n  const hours = date.getHours();\n  return `${hours}:${minutes > 9 ? \"\" : \"0\"}${minutes}`;\n}\n\n\nfunction Times() {\n  const sub = useSubscription(SLEEP_CHANGED);\n  const { loading, error, data } = useQuery(SleepTimes);\n  const [createSleepHook, { slp_data }] = useMutation(createSleep);\n  const [sleepObj, setSleepObj] = useState({type:\"\"})\n  useEffect(()=>{\n    if(!loading){\n    if(sub.data){\n      setSleepObj(sub.data.sleepChanged)\n    }else{\n      setSleepObj(data.sleeps[data.sleeps.length - 1])\n    }}\n  },[data,sub.data])\n\n  if (loading ) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  // function displayTime() {\n  //   let date = new Date();\n  //   let time = date.toLocaleTimeString();\n  //   console.log(time);\n  // }\n  \n  // const createClock = setInterval(displayTime, 1000);\n  return (\n    <>\n      <button\n        onClick={() => {\n        createSleepHook({ variables: { time: Date.now(), type: sleepObj.type===\"start\"?\"end\":\"start\"} } );\n        }}\n      >{sleepObj.type===\"start\"?\"Acordou\":\"Dormiu\"}</button>\n{/* <NumberInv></NumberInv> */}\n{sleepObj.type?\n\n       <p> {sleepObj.type===\"start\"?\"Dormindo\":\"Acordada\"} desde as {createTimeString(new Date(sleepObj.time))}</p>:\"\"\n      \n}    </>\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}